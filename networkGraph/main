import pandas as pd
import math
import elementsGenerator as eG
#pip install dash
#pip install dash_cytosacpe 
#pip install openpyxl
from dash.dependencies import Input, Output, State
from dash import Dash,dcc, ctx, html
import dash_cytoscape as cyto
import datetime
from random import randint
import tkinter as tk
import webbrowser
from threading import Timer
import threading
import sys
import dash_bootstrap_components as dbc
from PIL import Image

pd.options.mode.chained_assignment = None
app = Dash(__name__,external_stylesheets=[dbc.themes.COSMO])

cyto.load_extra_layouts()

eG.variablesInit()
#variable for pop up windows photo
photoDir= r"C:\Projects\Network Analysis\Dash\icon.png"
threadLock = threading.Lock()


counter = 0 

#returning only the last 8 digits of the phone number
def changerS(row):
    shortNumberSender=str(row["יוזם"])
    
    shortS=shortNumberSender[-8:len(shortNumberSender)]

    return (shortS)

#returning only the last 8 digits of the phone number
def changerR(row):
    shortNumberReceiver=str(row["מקבל"])
    shortR=shortNumberReceiver[-8:len(shortNumberReceiver)]
    return shortR

#converting the date to string
def toString(row):
    return(str(row["תחילה"]))

def caller():
    global df
    #checking if a file path was passed through the cmd
    if(filename=="null"):
        df = pd.read_excel(file_path)
    #it wasn't, means the path will come from the tkinter     
    else:
        df = pd.read_excel(filename)
   
     
    df["יוזם"]=df.apply(changerS,axis=1)
    df["מקבל"]=df.apply(changerR, axis=1)
    df["stringDate"]=df.apply(toString,axis=1)
    #setting the colours   
    eG.setColours(df) 
    #checking if it's the first time the app running. is so, calling the thread


def appLayout():
    #getting the image information 
    pil_image = Image.open(photoDir)
    #definning the drop downs
    fromDropDown=dcc.Dropdown(
                id='from',
                clearable=True,
                placeholder="-החל מ",
                options=[],
                #dash bootstrap components allow more styling such as spaces between the items
                #className is the variable to access it. full list of the options can be
                #found here https://dashcheatsheet.pythonanywhere.com/
                className="me-3",
                style={"textAlign":"center"},
                value=''
            )
    toDropDown=dcc.Dropdown(
                id='to',
                clearable=True,
                placeholder="עד",
                options=[],
                value='',
                style={"textAlign":"center"},
                className="me-3"
            )    
    entityDropDown= dcc.Dropdown(
                id='entity',
                clearable=True,
                className="me-3",
                placeholder="מעורב",
                options=[],
                style={"textAlign":"center"},
                value=''
            )    
    #definning the buttons        
    eB=html.Button("עדכן מעורבים", id="updateEntity", n_clicks=0, className="me-5")

    fillerB=html.Button(id="filler",className="me-5",style = dict(display='none'))

    fillerBu=html.Button(id="fillerB",className="me-5",style = dict(display='none'))

    tB=html.Button("עדכן זמנים", id="updateTime", n_clicks=0, className="me-5" )

    gB=html.Button("עדכן גרף", id='update-btn', n_clicks=0,className="mt-3"),

    fB=html.Button("בחר קובץ", id='changeFile', n_clicks=0,className="mt-3"),

    cB=html.Button("communities:off", id="communitySwitch", n_clicks=0,className="mt-3 border border-3"),

    app.layout = dbc.Container([
        html.Div(style={'width': '90%', 'display': 'inline-block'},children=[
        html.Img(src=pil_image, style={"float":"left"}),
        html.H1("Call of Duty", style={"textAlign":"center"}, className="mt-3"),
        ]),
        #wrap the items together to be in the same line
        dbc.Row([
            dbc.Col(gB,width=2),
            dbc.Col(cB,width=2),
            dbc.Col(fB,width=2)

        ]),
        dbc.Row([
            dbc.Col(entityDropDown,width=4),
            dbc.Col(toDropDown, width=4),
            dbc.Col(fromDropDown, width=4)
            
            ]),    
        dbc.Row([
            dbc.Col(tB,width=2),
            dbc.Col(fillerB,width=2),
            dbc.Col(eB,width=2)
           ]),



        # these divs will be filled with the relevant text from the nodes and edges when 
        # specific actions are executed 

        html.Div(html.Div(id="nodeInfo"),id="nodeWrapper",style={"width" : "100%","text-align":"center",'display': 'inline-block'}),
        html.Div(id="edgeInfo", style={"width" : "100%","text-align":"center",'display': 'inline-block'}),
        html.Div(id="edgeClick",style={"width" : "100%","text-align": "center",'display': 'inline-block'}),
        
        cyto.Cytoscape(
            id='netWorkGraph',
            elements=[],
            layout={'name': 'cose',
            'nodeRepulsion': 20000000,
            'nodeOverlap': 20,
            'gravity': 80},
            stylesheet=[],
            style={
                    'width': '100%', 
                    'height': '450px'
                }    
        ),
    ])
    #openning the browser automaticly 
    global counter
    if counter == 0:
        Timer(1, open_browser).start()
    
    counter = 1
    app.run_server(debug= False ,use_reloader=False)


# the function generate the time options for the drop box. 
# the function gets a dataframe, iterate through it and
# return a list of string that represent time
def timeOptionsGenerator(df):
    dateList=[]
    dateList.append("הכל")
    
    #iterating through the dataframe to get the dates of the calls
    for i in range(len(df.index)):
        dateList.append(df["stringDate"].loc[i])  

    #adding the dates of the calls to a list of dictionary to be added to the dropdown           
    timeOps=[
                {'label': name, 'value': name}
                for name in dateList
            ]   
    return timeOps        

#the function generate the entity options for the drop box. it gets
#the names of the columns to combine, the name of the new column
#and the data frame to iterate through
def entityOptionsGenerator(columnOne,columnTwo,columnThree,dataframe):
    entityList = []

    combined=eG.dataframeCombiner(columnOne,columnTwo,columnThree,dataframe)
    entityList.append("הכל")
        
    #iterating through the dataframe to extract the callers' names
    for i in range(len(combined.index)):
        try:
            math.isnan(float(str(combined["ישות"].loc[i])))
        except:
            entityList.append(combined["ישות"].loc[i])
        #adding the callers' names to a list of dictionary to be added to the dropdown
    entityNewOptions=[
            {'label': name, 'value': name}
            for name in entityList
        ]   
    return  entityNewOptions   

#the function filters the data frame and then returns
#the new list of time options that are filtered by
#the name selected
def updateTimeOptions(entity):
    if(entity == None or entity == "הכל"):
        return (timeOptions)
    #setting the conditions for the df
    filterOne=df["זיהוי יוזם"]==entity
    filterTwo=df["זיהוי מקבל"]==entity
    shortDf=df.where( filterOne | filterTwo)
    #dropping null rows
    shortDf.dropna(inplace=True, how= "all")
    #reseting the index
    shortDf.reset_index(drop=True, inplace = True)
    timeNewOptions=timeOptionsGenerator(shortDf)
    return (timeNewOptions)



#filterting the options of entity dropdown by the
#date dropdown options that were choosen
def updateEntity(start,end):
    if(start == None or start == "הכל") and (end == None or end == "הכל"): 
        return entityOptions
    elif(end == None or end == "הכל"):

        #converting the string to a datetime object 
        startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
        filterOne=df["תחילה"]>=startDate
        shortDf=df.where(filterOne)
        #dropping null rows 
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)

        entityNewOptions=entityOptionsGenerator("זיהוי יוזם","זיהוי מקבל","ישות",shortDf)
        
        return  entityNewOptions    
    elif (start == None or start == "הכל"):

        #converting the string to a datetime object 
        endDate = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
        #setting the conditions for the df
        filterOne=df["תחילה"]<=endDate
        shortDf=df.where(filterOne)
        #dropping null rows 
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)
       
        entityNewOptions =entityOptionsGenerator("זיהוי יוזם","זיהוי מקבל","ישות",shortDf)
        return  entityNewOptions     

    #converting the string to a datetime object 
    startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S') 
    endDate = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
    #setting the conditions for the df
    filterOne=df["תחילה"]<=endDate
    filterTwo=df["תחילה"]>=startDate
    shortDf=df.where(filterOne & filterTwo) 
    #dropping null rows 
    shortDf.dropna(inplace=True, how= "all")
    #reseting the index
    shortDf.reset_index(drop=True, inplace = True)
    entityNewOptions =entityOptionsGenerator("זיהוי יוזם","זיהוי מקבל","ישות",shortDf)
    return  entityNewOptions     


# call back is a function that's being called when the defined actions are being execueted.
# Input is the action which define the call, there can be multiplay inputs. for example
# the update-btn is one of the inputs. when it's being pressed, the callback is called and
# all the output items will be updated. it's important to figure out which input was the 
# trigger, and it can be found by using context callback compontent. 
# Output is what's going to be updated with the call back. for example, networkgraph elements
# are being changed when the callback is called, no matter which input triggered
# the callback. the return part of the callback have to include values for all the
# outputs, no matter which input triggered it.
# State is for when you want to get the change of data without triggering the call back
# yet. for example, the call back get the drop down entity's value so it can keep
# it and change the dataframe when the button updateTime is pressed or when the
# update btn is being pressed. but, the callback won't be triggered by the change
# of the entity drop down, only when one of the input is being changed.
# prevent initial call is to prevent the callback from running when the
# app is first being loaded. 

@app.callback(
    Output('netWorkGraph', 'elements'),
    Output('netWorkGraph', 'stylesheet'),
    Output('communitySwitch','children'),
    Output('entity', 'options'),
    Output('from', 'options'),
    Output('to', 'options'),
    Output('entity', 'value'),
    Output('from', 'value'),
    Output('to', 'value'),
    Output('nodeInfo', 'children'),
    Output('edgeClick', 'children'),
    Output('edgeInfo', 'children'),
    Input('update-btn','n_clicks'),
    Input('communitySwitch', 'n_clicks'),
    Input('updateEntity','n_clicks'),
    Input("updateTime",'n_clicks'),
    Input('netWorkGraph', 'tapEdgeData'),
    Input('netWorkGraph', 'mouseoverEdgeData'),
    Input('netWorkGraph', 'tapNodeData'),
    Input('changeFile','n_clicks'),
    State('entity', 'value'),
    State('from', 'value'),
    State('to', 'value'),
    State('communitySwitch','children'),
    State('entity', 'options'),
    State('from', 'options'),
    State('to', 'options'),
    State('nodeInfo', 'children'),
    State('edgeClick', 'children'),
    State('edgeInfo', 'children'),
    State('netWorkGraph', 'elements'),
    State('netWorkGraph', 'stylesheet'),

    prevent_initial_call=True
)


#the function checks what triggered the call back and then calls the right function
# the arguments have to be in the same order that the app callback have 
def action(uB,cB,tB,eB,edgeClickInfo,edgeInfo,nodeInfo,fileB,entity,start,end,communityText,entityOp,startOp,endOp,nodeChild,edgeClickChild,edgeChild,nE,nSH):
    triggeredId = ctx.triggered_id
    #checking which button triggered the call back
    if triggeredId =="changeFile":
        global file_path
        root = tk.Tk()
        root.attributes("-topmost", True) # this also works
        root.lift()
        root.withdraw()

        file_path = tk.filedialog.askopenfilename(filetypes=[("Excel files", ".xlsx .xls")])
        root.destroy()
        caller() 
        global entityOptions
        global timeOptions
        
        entityOptions=entityOptionsGenerator("זיהוי יוזם","זיהוי מקבל","ישות", df)
        timeOptions=timeOptionsGenerator(df) 
        return(eG.newElements(df),eG.getSelectors(),communityText,entityOptions,timeOptions,timeOptions," ", " ", " ", " ", " " , " ")
    if triggeredId == "update-btn":
        nod,styleSh=updateGraph(uB,entity,start,end,communityText)
        return(nod,styleSh,communityText,entityOp,startOp,endOp,entity,start,end," ", " " , " ")
    if triggeredId =="communitySwitch":
        nod,styleSh,comText=changeCommunity(cB)
        return(nod,styleSh,comText,entityOptions,timeOptions,timeOptions," " , " " , " " , "  ", " " ," ")

    #since click and hover on nodes/edges have the same id (the graph's one), we have to check which one triggered
    # the callback. the id is passed as dictionary, then the code get the key which holds the one who triggered
    # the callback, split it to a list because it comes as "networkgraph.edgeclick" and take the second argument    
    triggeredId = ctx.triggered_id
    triggeredDict = { }
    splitter = []
    checker=" "
    triggeredDict=ctx.triggered_prop_ids
    for key in triggeredDict.items():
        splitter=key[0].split(".")

    checker=splitter[1]
    if(checker=="tapNodeData"):
        data=displayTapNodeData(nodeInfo)
        return(nE,nSH,communityText,entityOp,startOp,endOp,entity,start,end,data,edgeClickChild,edgeChild)
    if(checker=="tapEdgeData"):
        data=displayTapEdgeData(edgeClickInfo)
        return(nE,nSH,communityText,entityOp,startOp,endOp,entity,start,end,nodeChild,data,edgeChild)
    if(checker=="mouseoverEdgeData"):
        data=displayHoverEdgeData(edgeInfo)
        return(nE,nSH,communityText,entityOp,startOp,endOp,entity,start,end,nodeChild,edgeClickChild,data)
    if triggeredId == "updateTime":
        timeOps= updateTimeOptions(entity)
        return(nE,nSH,communityText,entityOptions,timeOps,timeOps,entity,start,end,nodeChild,edgeClickChild,edgeChild)
    if triggeredId == "updateEntity":
        entityOps= updateEntity(start,end)
        return(nE,nSH,communityText,entityOps,timeOptions,timeOptions,entity,start,end,nodeChild,edgeClickChild,edgeChild)
    else:
        return resetDropdown(nE,nSH,communityText)  


def resetDropdown(nE,nSH,communityText):
    return (nE,nSH,communityText,entityOptions,timeOptions,timeOptions," " , " " , " "," " ," ", " ")

#the function changes the appernace of the nodes if relation to
#how many times the button was pressed. the default is that
#communities filter is off
def changeCommunity(communityBtn):
    #checking whenever the community button is on or off after the user pressed the 
    #button. the default is off, means when the times the button was pressed is divided
    # by 2 with no remainder,it's off. otherwise, on    
    if communityBtn%2 ==1:
        communityNodes,communitySelectors=eG.styleChecker(df,"communities:on" )
            
        return(communityNodes, communitySelectors, "communities:on")
    nodes,styleSh=eG.styleChecker(df, "communities:off")
    return(nodes,styleSh,"communities:off")
#the function checks which values were selected, then change the graph
#based on the info
#entity is the caller name, start is the starting date and end is the to date
def updateGraph(button,entity, start, end,communityText):

    if((entity=="הכל" or entity == None or entity== "" ) and (start == None or start == "הכל" or start == "" ) and (end == None or end == "הכל" or end == "")):

        nodes,styleSh=eG.styleChecker(df,communityText)
    elif((entity=="הכל" or entity == None) and (end == None or end == "הכל")): 

        #converting the string to a datetime object 
        startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
        #setting the condition for the df
        timeDf=df.where(df["תחילה"]>=startDate)
        
        #dropping null rows
        timeDf.dropna(inplace=True, how= "all")
        #reseting the index
        timeDf.reset_index(drop=True, inplace = True)
        nodes,styleSh=eG.styleChecker(timeDf,communityText)
        
    elif((entity=="הכל" or entity == None) and (start == None or start == "הכל")):

        #converting the string to a datetime object 
        endDate=datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
        #setting the condition for the df
        timeDf=df.where(df["תחילה"]<=endDate)
        #dropping null rows
        timeDf.dropna(inplace=True, how= "all")
        #reseting the index
        timeDf.reset_index(drop=True, inplace = True)
       
        nodes,styleSh=eG.styleChecker(timeDf,communityText)
    elif(entity=="הכל" or entity == None):

        #converting the string to a datetime object 
        startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
        #changing the string to a datetime object 
        endDate=datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
        #setting the conditions for the df
        filterOne=df["תחילה"]>=startDate
        filterTwo=df["תחילה"]<=endDate
        timeDf=df.where(filterOne & filterTwo)
        #dropping null rows
        timeDf.dropna(inplace=True, how= "all")
        #reseting the index
        timeDf.reset_index(drop=True, inplace = True)
       
        nodes,styleSh=eG.styleChecker(timeDf,communityText)
    elif(start == None or start == "הכל") and (end == None or end == "הכל"): 

        #setting the conditions for the df
        filterOne=df["זיהוי יוזם"]==entity
        filterTwo=df["זיהוי מקבל"]==entity
        shortDf=df.where( filterOne | filterTwo)
        #dropping null rows
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)
        
        nodes,styleSh=eG.styleChecker(shortDf,communityText)
    elif(end == None or end == "הכל"):

        #converting the string to a datetime object 
        startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
        #setting the conditions for the df
        filterOne=df["זיהוי יוזם"]==entity
        filterTwo=df["זיהוי מקבל"]==entity
        filterThree=df["תחילה"]>=startDate
        shortDf=df.where((filterOne | filterTwo) & filterThree)
        #dropping null rows 
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)
        nodes,styleSh=eG.styleChecker(shortDf,communityText)

    elif (start == None or start == "הכל"):

        #converting the string to a datetime object 
        endDate = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
        #setting the conditions for the df
        filterOne=df["זיהוי יוזם"]==entity
        filterTwo=df["זיהוי מקבל"]==entity
        filterThree=df["תחילה"]<=endDate
        shortDf=df.where((filterOne | filterTwo) & filterThree)
        #dropping null rows 
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)
       
        nodes,styleSh=eG.styleChecker(shortDf,communityText)
    else:
        #converting the string to a datetime object 
        startDate = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
        #converting the string to a datetime object 
        endDate = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
        #setting the conditions for the df
        filterOne=df["זיהוי יוזם"]==entity
        filterTwo=df["זיהוי מקבל"]==entity
        filterThree=df["תחילה"]<=endDate
        filterFour=df["תחילה"]>=startDate
        shortDf=df.where((filterOne | filterTwo) & filterThree & filterFour)
        #dropping null rows 
        shortDf.dropna(inplace=True, how= "all")
        #reseting the index
        shortDf.reset_index(drop=True, inplace = True)
       
        nodes,styleSh=eG.styleChecker(shortDf,communityText)
    return (nodes, styleSh)



#returning the first part of the text tag of the edge
#which contains amount of calls and total time they 
#took
def displayTapEdgeData(data):
    if data:
        info=data['text'].split("$")
        return info[0]


#returns the name and the company of the sender              
def displayTapNodeData(data):
    if data:
        name = data['label'].split("-")
        return "שם:" +name[1] +" חברה: "+ data['company']



#returns the names of the sender and the receiver
def displayHoverEdgeData(data):
    if data:
        info=data['text'].split("$")
        return "יוזם: "+info[1].upper() + " מקבל: " + info[2].upper()    

#setting the port address
port = 8050 

#making the browser open
def open_browser():
    webbrowser.open_new("http://localhost:{}".format(port))

if __name__ == '__main__':

    global filename
    filename = "null"
    if len(sys.argv) > 1:
        filename=sys.argv[1]
    appLayout()
