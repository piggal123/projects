from sparknlp.base import *
from sparknlp.annotator import *
from pyspark.ml import Pipeline

 
import os
import sys

import pandas as pd
import methods as method

import sparknlp



# gets the folder path that the user chose then
# iterates through the files, checking if the file
# is txt. then extracting the text and calling
# the proccessor method. convert the final result from
# dataframe to excel worksheet    
def textExtractor(dirLoc):


    fileFound = False
    firstTime = True

    counter = 1
    files=os.listdir(dirLoc)
    
    # iterating through the files
    for f in files:
        
        is_file_to_read = False
        path=dirLoc+"\\"+f
       
        file_name=f
        text = " "
       
        # checking the file is a text file
        if(f.endswith("txt")):
 
            fileFound= True
            # checking if the folder needs to be created
            if(firstTime):
                firstTime = False
                method.create_folder(dirLoc+"\\results\\")
            is_file_to_read=True    
            with open(path,encoding='utf-8',mode="r+") as file:
                text= file.read()
        # checking if there was a txt file
        if(is_file_to_read):
            global firstRun
            
            # checking if it's the first run. if so, starting spark and setting the dataframes
            if(firstRun):
                sparkInit()
                gloDfs()
                firstRun = False 
  
            proccessor(text,file_name) 
            counter+=1
            print("file " , file_name , " is done.", len(files)-counter , " files left")
        
    if (fileFound):
        global resultDf
        global detailesDf
        # sorting the dataframe in descending order
        resultDf.sort_values("ציון סופי",inplace=True,ascending=False)

        # renaming the columns to have hebrew names
        finalDeDf=detailesDf.copy(True)
        finalDeDf.rename(columns={"שם הקובץ":"שם הקובץ","מילה":"מילה","ציון":"ציון","total":"שכלול","counter":"מופעים","סוג":"סוג"},inplace=True)
        

          
        # if the user checked the box to save the old results, a new
        # file will be created with a different name
        try:
            
           
            writer = pd.ExcelWriter(dirLoc+"\\results\\תוצאות.xlsx", engine='xlsxwriter')
            # Convert the dataframe to an XlsxWriter Excel object.
            resultDf.to_excel(writer, sheet_name="תוצאות",index=False)
            finalDeDf.to_excel(writer, sheet_name="פירוט תוצאות",index=False)
            # Get the xlsxwriter workbook and worksheet objects.
            worksheet = writer.sheets["תוצאות"]
            # setting the width of the columns
            worksheet.set_column(1, 2, 11)
            worksheet.set_column(4, 13, 15)
            worksheet.set_column(0, 1, 20)
            # Change the direction for the worksheet.
            worksheet.right_to_left()
            
            worksheetD= writer.sheets["פירוט תוצאות"]
            
            worksheetD.set_column(1, 3, 15)
            worksheetD.set_column(0, 1, 20)
            worksheetD.right_to_left()
            # Close the Pandas Excel writer and output the Excel file.
            writer.save()
            

            # resting the result dataframe so data won't carry on
            # to the next run
            gloDfs()
            print("סיים")    
        except:
            print("סגור את האקסל והתחל שוב")


# setting the dataframes that are going to hold
# the information
def gloDfs():
    global resultDf
    global detailesDf    

    detailesDf= pd.DataFrame()
    detailesDf["שם הקובץ"]= " "
    detailesDf["מילה"]= " "

    resultDf=pd.DataFrame()
    
# setting the dataframe that hold the words, how many times
# they appeared and the value of the muliplication of 
# the weight and the times they appeared
def dfSetter(firstExcel,secondExcel,twoExcels):
    global wordsDf


    wordsDf = pd.read_excel(firstExcel)


    # if the user entered a another excel sheet, combining the two
    # and removing the duplicates so that the user's sheet one
    # will stay
    if (twoExcels):
        excelDf= pd.read_excel(secondExcel)
        
        excelDf = pd.concat([excelDf, wordsDf], ignore_index = True)

        excelDf.drop_duplicates(subset=['מילה'], inplace= True)
        
        wordsDf= excelDf.copy(True)
       
    wordsDf["שם הקובץ"]= " "
    wordsDf["counter"] = 0
    wordsDf["total"] = 0

    # changing the order of columns to match in 
    # both results and results' detailes
    cols = wordsDf.columns.tolist()
    cols = cols[-1:] + cols[:-1]
    wordsDf = wordsDf[cols]
    wordsDf.set_index('מילה', inplace=True)

    

# initializing spark and setting the pipeline which
# will be used later to filter the data

def sparkInit():   
    global nlp_pipeline
    global spark

    
    spark=sparknlp.start()
 
    # setting the document assembler. inputCol is where the information comes from
    # and outputcol is where to put the information after the proccess is 
    # done
    documentAssembler = DocumentAssembler() \
    .setInputCol("text") \
    .setOutputCol("document")
    
    
    tokenizer = Tokenizer() \
    .setInputCols(["document"]) \
    .setOutputCol("token")
    
    stop_words = StopWordsCleaner().load("stopHeb") \
        .setInputCols(["token"]) \
        .setOutputCol("cleanTokens")

    nlp_pipeline = Pipeline(stages=[documentAssembler,tokenizer, stop_words])

    
def proccessor(text,fileName):
    
    # creating a pipleine with the desired settings, putting the text in the text column
    light_pipeline = LightPipeline(nlp_pipeline.fit(spark.createDataFrame([[""]]).toDF("text")))
    results = light_pipeline.annotate(text)

    
    # getting the words without the stop words from the text
    value= results["cleanTokens"]
    #print ("words without stop words",results["cleanTokens"])
    
    # creating a copy of the dataframe 
    wordDf=wordsDf.copy(True)

    # iterating through the words, adding +1 for each appearance 
    # of a word that was marked
    for i in range(len(text)):
        try:

            wordDf.loc[value[i],"counter"]
            wordDf.loc[value[i],"counter"] = wordDf.loc[value[i],"counter"] +1
        except:
            try:
                # checking if the word has one letter at the start that 
                # is just addition to the word
                wo = value[i][1:]

                wordDf.loc[wo,"counter"]
                wordDf.loc[wo,"counter"] = wordDf.loc[wo,"counter"] +1
                
            except:
                try:
                    # checking if the word has two letters at the start that 
                    # are just addition to the word
                    rd = value[i][2:]

                    wordDf.loc[rd,"counter"]
                    wordDf.loc[rd,"counter"] = wordDf.loc[rd,"counter"] +1
                except:
                    try:
                        # checking if the word is at plural version
                        dr = value[i][:len(value)-2]
                        wordDf.loc[dr,"counter"]
                        wordDf.loc[dr,"counter"] = wordDf.loc[dr,"counter"] +1
                    except:
                        try:
                            # checking if the word is at plural version and
                            # the singular version missing the letter ה
                            dr = value[i][:len(value)-2]+"ה"
                            wordDf.loc[dr,"counter"]
                            wordDf.loc[dr,"counter"] = wordDf.loc[dr,"counter"] +1
                        except:    
                            continue


   
    
    wordDf.sort_values("counter",inplace=True,ascending=False)
    wordsCount = wordDf["counter"].sum()
  
    wordDf.reset_index(inplace=True)

    
    firstWord = method.appeareanceChecker(wordDf["מילה"].loc[0],wordDf["counter"].loc[0])
    secondWord = method.appeareanceChecker(wordDf["מילה"].loc[1],wordDf["counter"].loc[1])
    thirdWord = method.appeareanceChecker(wordDf["מילה"].loc[2],wordDf["counter"].loc[2])
    fourthWord = method.appeareanceChecker(wordDf["מילה"].loc[3],wordDf["counter"].loc[3])
    fifthWord= method.appeareanceChecker(wordDf["מילה"].loc[4],wordDf["counter"].loc[4])
    sixthWord=method.appeareanceChecker(wordDf["מילה"].loc[5],wordDf["counter"].loc[5])
    seventhWord=method.appeareanceChecker(wordDf["מילה"].loc[6],wordDf["counter"].loc[6])
    eighthWord=method.appeareanceChecker(wordDf["מילה"].loc[7],wordDf["counter"].loc[7])
    ninthWord=method.appeareanceChecker(wordDf["מילה"].loc[8],wordDf["counter"].loc[8])
    tenthWord=method.appeareanceChecker(wordDf["מילה"].loc[9],wordDf["counter"].loc[9])
    

    wordDf["total"]=wordDf.apply(method.totalCalculator,axis=1)
    score = wordDf["total"].sum()

    # deleting the rows where the counter is less than 1
    wordDf = wordDf.loc[(wordDf["counter"] > 0)]  
    
    wordDf["שם הקובץ"]=fileName

    
    if(len(wordDf)==0):
        avg = 0
    else:
        avg=score//wordsCount
    
 
    global resultDf 
    # creating a dataframe to be concated later to the final dataframe.
    # the dataframe includes the file name, it's score and the five words
    # that appeared the most
    tempDf=pd.DataFrame({"שם הקובץ" : [fileName], "ציון סופי":[score],"כמות מילים":wordsCount,"ממוצע":avg, "מקום ראשון" : firstWord, "מקום שני" : secondWord,
                         "מקום שלישי": thirdWord,"מקום רביעי": fourthWord,"מקום חמישי":fifthWord,"מקום שישי":sixthWord,"מקום שביעי":seventhWord,"מקום שמיני":eighthWord,"מקום תשיעי":ninthWord,"מקום עשירי":tenthWord})
    # concating the dataframes together
    resultDf = pd.concat([resultDf, tempDf], ignore_index = True, axis = 0)

    global detailesDf

    detailesDf= pd.concat([detailesDf,wordDf], axis= 0)

def varInit():    
    global firstRun 
    firstRun = True
    global filesCounter
    filesCounter = 0



def main():

    dirLoc = ""
    twoExcels= False
    firstExcel= "empty"
    secondExcel = "empty"
    if len(sys.argv) > 1:
        dirLoc=sys.argv[1]
    if len(sys.argv) > 2:
        firstExcel=sys.argv[2]
    if len(sys.argv) > 3:
        secondExcel=sys.argv[3]
        twoExcels= True
    varInit()
    dfSetter(firstExcel,secondExcel,twoExcels)

    textExtractor(dirLoc)
    
        
if __name__ == "__main__":
    main()  
