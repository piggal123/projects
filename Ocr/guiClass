import pandas as pd
import time

class gui_vars:

    dir_load=""
    info_path=""
    info_df= pd.DataFrame(columns=["file name","text","rotated"])
    ocred_files_count=0
    rotated_files_count = 0
    workspace_id = 0
    dpi = 0
    workers = 15
    rotated_path=""
    st= 0 
    psm = "11"

    
    def set_dir_load(self,location):
        """
        Setting the location of the folder for the downloaded files
        
        Parameters
        ----------
        location : string
            Path to the folder to be created at which holds the downloaded files.

        Returns
        -------
        None.

        """
        self.dir_load=location+"//files//"
        
    
    def get_dir_load(self):
        """
        

        Returns
        -------
        string
            Location of the folder that contains the downloaded files.

        """
        return self.dir_load 
    
    def set_psm(self,psm):
        """
        Setting the psm mode for the ocr

        Parameters
        ----------
        psm : string
            The psm mode for the ocr to run at.

        Returns
        -------
        None.

        """
        self.psm=psm
        
    def get_psm(self):
        """
        

        Returns
        -------
        string
            Psm mode for ocr to run at.

        """
        return self.psm
    
    def set_dpi(self,dpi):
        """
        Setting the dpi for the pdfs that are converted to images for the ocr

        Parameters
        ----------
        dpi : int
            The dpi the pdf should be saved at.

        Returns
        -------
        None.

        """
        self.dpi=dpi
        
    def get_dpi(self):
        """
        

        Returns
        -------
        int
            The dpi the pdf should be saved at.

        """
        return (self.dpi)
    
   
    def set_rotated_path(self,location):
        """
        Setting the location for the rotated files

        Parameters
        ----------
        location : string
            Path for the location of the rotated files.

        Returns
        -------
        None.

        """
        self.rotated_path=self.dir_load+location
        
    
    def get_rotated_path(self):
        """
        

        Returns
        -------
        string
            Location of the rotated files.

        """
        
        return self.rotated_path 
        
    def set_workspace_id(self,number):
        """
        Setting the workspace id for farther usage

        Parameters
        ----------
        number : string
            The number of workspace in Relativity server.

        Returns
        -------
        None.

        """
        self.workspace_id=number
        
    def get_workspace_id(self):
        """
            
        
        Returns
        -------
        string
            Workspace id in Relativity server.

        """
        return str(self.workspace_id)
    
    
    
    def set_workers(self,number):
        """
        Setting the number of threads the code going to use

        Parameters
        ----------
        number : int
            Amount of threads.

        Returns
        -------
        None.

        """
        self.workers=number
     
     
    def get_workers(self):
        """
        

        Returns
        -------
        int
            Amount of threads.

        """
        return self.workers

        
    def set_info_path(self,location):
        """
        Setting the folder path that contains the information file

        Parameters
        ----------
        location : string
            Path the folder should be created at.

        Returns
        -------
        None.

        """
        self.info_path=self.dir_load+"//"+location
        
    def get_info_path(self):
        """
        

        Returns
        -------
        string
            Path to the information folder.

        """
        
        return self.info_path
    
    
    
    def reset_all(self):
        """
        Resetting the values of the variables for the second run

        Returns
        -------
        None.

        """
        self.st_init()
        self.rotated_files_count = 0 
        self.ocred_files_count = 0
     
    
    def increase_rotated_files_count(self):
        """
        Increasing by one the amount of files that were finished, to update
        the text of the top label and the progress bar

        Returns
        -------
        None.

        """
        self.rotated_files_count+=1
        

    def get_rotated_files_count(self):
        """

        Returns
        -------
        int
            How many files were rotated.

        """
        return self.rotated_files_count
    
    
    def increase_ocred_files_count(self):
        """
        Increasing by one the amount of files that were finished, to update
        the text of the top label and the progress bar

        Returns
        -------
        None.

        """
        
        self.ocred_files_count+=1
        
    
    def get_ocred_files_count(self):
        """
        

        Returns
        -------
        int
            How many files were ocred.

        """
        return self.ocred_files_count
    
    
    def empty_excel(self):
        """
        Checking whenever the excel is empty. if so, saving it with no error were found

        Returns
        -------
        None.

        """
        if self.info_df.empty:

            self.saving_excel("no files","were found")
         

    def saving_excel(self,file_name,text, counter):
        """
        
        Parameters
        ----------
        file_name : string
            The name of the file to be created.
        text : string
            Description of the error.
        counter : int
            At what rotation the error occured for farther investigation.

        Returns
        -------
        None.

        """
        # creating a row with the file name and the text and the amount of time it rotated
        info_row = pd.DataFrame([{'file name':file_name, 'text':text, "rotated":counter}])
        
        # concating the row with the pandas
        self.info_df=pd.concat([self.info_df, info_row])
        
        # creating a writer for the excel
        writer= pd.ExcelWriter(self.get_info_path()+"//info.xlsx", engine = 'xlsxwriter')

        self.info_df.to_excel(writer,sheet_name="info",index=False)
        worksheet=writer.sheets["info"]
        worksheet.set_column(0,2,30)
        
        # saving the excel
        writer.close()         
    
    def st_init(self):
        """
        Sets the time the code started running        

        Returns
        -------
        None.

        """
        self.st=time.time()
    
    def get_st_time(self):
        """
        

        Returns
        -------
        time
            The time the script started running.

        """
        return self.st    
