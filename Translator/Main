from tkinter import Button, Tk
import classes
import func_model
from typing import Any
import warnings
from threading import Lock, Thread
from multiprocessing.pool import ThreadPool
import server_model
from relativity_settings import head
from translate_function import translate
import time
from os import environ

all_objects = []
func_model.create_folder("logs//")
logger = func_model.configure_logger('my_logger',  "logs//" + func_model.get_current_time() + ".log")
lock = Lock()
environ['CURL_CA_BUNDLE'] = ''
st = time.time()
gui_vars = classes.GuiVars(st)
errors_class = classes.ErrorsWriter(func_model.get_current_time(), "errors//")
stop_flag = False


def add_to_list(workspace_id: str) -> None:
    """
    calling the pull request until there are none more objects
    to pull
    :param workspace_id str: the unique key of the case in relativity
    :return: None
    """
    i = 0
    while not stop_flag:
        data = server_model.pull_request(workspace_id, i, head)
        all_objects.append(data)

        i += 1
        if not data:

            break


class MyThread(Thread):
    def __init__(self, name, new_tk_vars: classes.TkVars):
        Thread.__init__(self)
        self.name = name
        self.new_tk_vars = new_tk_vars

    def run(self):
        if self.name == "checker":
            checker(self.new_tk_vars)


def start(tk_vars: classes.TkVars) -> None:
    """
    Starting the code in a different thread so the gui won't freeze
    args:
        tk_vars TkVars: a class instance that holds the tkinter info
    :return:
    None
    """

    checker_thread = MyThread("checker", tk_vars)

    checker_thread.start()


def info_download(tk_vars: classes.TkVars, objects: [str], i: int) -> None:
    
    """
    Updating the gui variables and calling the workflow_manager function
    :param tk_vars TkVars: a class instance that holds the tkinter info
    :param objects [str]: list of objects from relativity
    :param objects [str]: of objects from relativity
    :param i int: the number of the run
    :return:
    None
    """

    tk_vars.info_label.config(text="in progress")

    func_model.setting_tk_values(tk_vars, i, len(objects))

    tk_vars.info_label.config(text="getting text")

    # checking if the no threads check box was checked
    if tk_vars.no_thread_check_box.get() == 1:

        workflow_manager(tk_vars, objects, False)

    else:
        pool = ThreadPool(processes=gui_vars.workers)
        threads = []
        chunk_iterator = classes.ChunkIterator(objects, gui_vars.workers)

        for partial_objects_list in chunk_iterator:
            threads.append(pool.apply_async(workflow_manager, (tk_vars, partial_objects_list, True)))

        for thread in threads:
            thread.get()

        pool.close()
        pool.join()



def workflow_manager(tk_vars: classes.TkVars, partial_objects_list: [str], lock_required: bool) -> None:
    """
    retrieving the file's text from relativity, removing hebrew and numbers from
    it, then calling the translate function. creating a push request to relativity
    to update the field
    :param tk_vars TkVars: a class instance that holds the tkinter info
    :param partial_objects_list [str]: objects list from relativity
    :param lock_required bool: checker if threads are being used or just a single one
    :return:
    None
    """

    tk_vars.info_label.config(text="translation in progress")

    iterator = classes.StringListIterator(partial_objects_list)

    for string in iterator:
        
        if 'ArtifactID' in string:
            
            artifact_id = str(string['ArtifactID'])
            
            try:
                text_to_translate = server_model.long_text_pull_request(artifact_id, head, gui_vars.workspace_id)
                
                translate_language = tk_vars.chosen_languague[0] + tk_vars.chosen_languague[1]
                
                translated_text = translate(text_to_translate, tk_vars.translate_progress_bar, translate_language)

                if server_model.push_request(translated_text, artifact_id, gui_vars.workspace_id, head):
                    print("file ", artifact_id, " was translated")

                else:
                    print("file ", artifact_id, " failed to upload")

            except Exception as e:

                logger.error("An exception occurred " + artifact_id, exc_info=True)

                print("error is", e)

                text = "updated to relativity, failed to save "

                errors_class.saving_excel(artifact_id, text)

                if server_model.push_request(text, artifact_id, gui_vars.workspace_id, head):
                    print(text + artifact_id)

        gui_vars.done_files = gui_vars.done_files + 1

        
        if lock_required:
            # making sure the theards won't access the same variable at the same time
            with lock:
                func_model.show_progress(gui_vars.done_files, tk_vars.start_label, tk_vars.progress_bar, True)

        else:
            func_model.show_progress(gui_vars.done_files, tk_vars.start_label, tk_vars.progress_bar, True)


def loop_start(tk_vars: classes.TkVars) -> None:
    """_summary_
    starting the loop to iterate through the objects from relativity
    Args:
        tk_vars (classes.TkVars): a class instance that holds the tkinter info

    Returns:
        None
    """
    for i in range(50000):

        if i == 0:

            start_loop_time_tracker = time.time()

            # waiting for the response from relativity
            while True:
                try:
                    partial_objects_list = all_objects[i]

                    # we got a response, the list isn't empty, break the loop
                    if len(partial_objects_list) > 0:
                        
                        info_download(tk_vars, partial_objects_list, i)
                        break
                    during_loop_time_tracker = time.time()

                    # too much time went by, user didn't mark anything in relativity
                    if during_loop_time_tracker - start_loop_time_tracker > 15:
                        print("did you mark the right conditions in relativity?")
                        break
                except:
                    pass
                time.sleep(1)

        # not the first iteration, no need to wait anymore for response        
        else:
            # checking if there are objects to itreate through or we done
            try:
                partial_objects_list = all_objects[i]

                if len(partial_objects_list) > 0:
                    
                    info_download(tk_vars, partial_objects_list, i)

            except:

                et = time.time()
                func_model.no_more_files(tk_vars.info_label, gui_vars.st, et)
                stop_flag = True
                background_thread.join()
                break


def checker(tk_vars: classes.TkVars) -> None:
    """
    checking if user input are legal
    :param tk_vars TkVars: a class instance that holds the tkinter info 
    :return:
    None
    """

    workspace_id = tk_vars.workspace_id_entry.get()

    if workspace_id == "":

        tk_vars.workspace_error_label.config(text="ENTER CASE ID", fg="red")

    elif tk_vars.language.get() == "Select Language":
        tk_vars.language_error_label.config(text="CHOOSE LANG", fg="red")

    else:
        tk_vars.language_error_label.config(text="")
        tk_vars.chosen_languague =  tk_vars.language.get()
        tk_vars.workspace_error_label.config(text="V", fg="green")

        gui_vars.workspace_id = workspace_id

        warnings.catch_warnings()
        warnings.simplefilter("ignore")
        try:
            gui_vars.workers = int(tk_vars.workers.get())

        except:
            gui_vars.workers = 15

        func_model.create_folder("errors//")

        tk_vars.info_label.config(text="waiting for response")

        background_thread = Thread(target=lambda: add_to_list(gui_vars.workspace_id))

        # Start the thread
        background_thread.start()

        loop_start(tk_vars)


def gui_configuration() -> None:
    """
    creating a TkVars instance to generate the tkinter view
    :return:
    None
    """
    font_tuple = ("Comic Sans MS", 20, "bold")
    font_size = 14

    tk_vars = classes.TkVars(window, font_size, font_tuple)

    start_button = Button(text="start", font=font_size,
                          command=lambda: start(tk_vars))
    start_button.grid(row=15, column=2)

    window.focus()
    window.mainloop()


if __name__ == "__main__":
    window = Tk()
    window.geometry('380x400')
    func_model.install_translate_models()

    gui_configuration()
