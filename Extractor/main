#install pyautogui


from pdf2image import convert_from_path
import PIL.Image
import pytesseract
import codecs
import os
from tkinter import Tk, filedialog
import pyautogui
import shutil
from PyPDF2 import PdfFileMerger
import tkinter as tk
import cv2
from tkinter import *
from tkinter import ttk
import threading


# variable for pop up windows photo
photoDir= r'C:\Users\gal\Desktop\python\icon.png'
threadLock = threading.Lock()
#creating the window
window = tk.Tk()
window.title("רשות התחרות")
window.geometry('350x250')
#changing the default icon
window.iconphoto(False, tk.PhotoImage(file=photoDir))


#saving the check box state into a variable
pdfCheckBox = IntVar()
textCheckBox = IntVar()



class myThread (threading.Thread):
    def __init__(self, name):
      threading.Thread.__init__(self)
      self.name = name
    def run(self):
        if(self.name=="pdf"):
            threadLock.acquire()
            pdfMerger()
            threadLock.release()  
        elif(self.name=="text"):
            threadLock.acquire()
            textExtractor()
            threadLock.release()  
        if(self.name=="pop"):
            threadLock.acquire()
            progressPopUp()
            threadLock.release()      


#getting the folder path from the user
def getFolderPath():
    global dirLocLoad
    dirLocLoad = filedialog.askdirectory()

#checking which action should be taken depends on the 
#check boxs that are clicked. if none, a message will appear
#asking to choose an option, otherwise will call the
#suitable method
def determinateAction():
    if((pdfCheckBox.get() == 0) and textCheckBox.get() == 0):
        wind = tk.Toplevel(window)
        wind.iconphoto(False, tk.PhotoImage(file=photoDir))
        labelone=tk.Label(wind, text='please select an option first').pack(padx=30, pady=30)
    else:
        popUpThread = myThread("pop")
        popUpThread.start()   
        if ((pdfCheckBox.get() == 1) and textCheckBox.get() == 0): 
            pdfThread = myThread("pdf")
            pdfThread.start()
        elif ((pdfCheckBox.get() == 0) and textCheckBox.get() == 1):
            textThread = myThread("text")
            textThread.start()                  
        else:
            pdfThread = myThread("pdf")
            textThread = myThread("text")
            pdfThread.start()            
            textThread.start()      


# iterating through the files, converting them from pdf is necessary
# and extracting the data out of them to a new folder which is being
# deleted at the end of the process
def textExtractor():
    files=os.listdir(dirLocLoad)
    is_pdf_found = False
    #creating the folder where the converted text going to appear
    create_folder("\\results\\")
  
    for f in files:

        is_file_to_read = False
        path=dirLocLoad+"\\"+f
        file_name=get_file_name_without_ending(path) 
        # checking if the file is pdf        
        if f.endswith('.pdf'): 
            is_file_to_read=True      
            is_pdf_found = True            
            data=convert_to_image(path, file_name, 0) 
        # checking if the file is a photo that can contain words            
        elif (f.endswith('.png') or f.endswith('.jpeg') or f.endswith('.jpg')
        or f.endswith('.tiff') or f.endswith('.bmp') or f.endswith('.gif') or f.endswith('.webp')):
            is_file_to_read=True  
            data=get_data(path)                        
        #making sure the file is the type of file we want to read            
        if (is_file_to_read):        
            f_name=saving_folder_name(file_name)        
            write_data(f_name, data)      
    #deleting the folder with the converted files 
    #but checking if the folder was created
    if(is_pdf_found):    
        shutil.rmtree(dirLocLoad+"\\convereted files")
    
    donePopUp()

# creating a pop up to let the user know the procces is 
# in progress
def progressPopUp():
    wind = tk.Toplevel(window)
    wind.iconphoto(False, tk.PhotoImage(file=photoDir))
    labelone=tk.Label(wind, text='in progress').pack(padx=30, pady=30)
 
# creating a pop up to let the user know when the action
# is done
def donePopUp():
    windo = tk.Toplevel()
    windo.iconphoto(False, tk.PhotoImage(file=photoDir))

    button_close = tk.Button(windo, text="Done", command=windo.destroy)
    button_close.pack(fill='x')  
    
    
# changing pdfs to image and then back to pdf to 
# prevent a non-searchable pdf being merged
# converting images to pdfs and then
# merging everything together
def pdfMerger():
    create_folder("\\convereted files")
    files=os.listdir(dirLocLoad)
    is_photo_found = False
    create_folder("\\results\\")

    # iterating through files 
    for f in files:
        is_file_to_read = False
        path=dirLocLoad+"\\"+f
        file_name=get_file_name_without_ending(path) 
        # checking if the file is pdf        
        if f.endswith('.pdf'): 
            is_file_to_read=True                 
            data=convert_to_image(path, file_name, 1) 
            
        # checking if the file is a photo that can contain words            
        elif (f.endswith('.png') or f.endswith('.jpeg') or f.endswith('.jpg')
        or f.endswith('.tiff') or f.endswith('.bmp') or f.endswith('.gif') or f.endswith('.webp')):
            is_photo_found = True 
            is_file_to_read=True 
            convertor(path)            
    files=os.listdir(dirLocLoad+"\\convereted files")
    # itearting through converted files to change the photos 
    # to pdfs
    for f in files:
        path=dirLocLoad+"\\convereted files\\"+f
        if f.endswith('.jpg'):
            is_photo_found = True
            convertor(path)
    merger = PdfFileMerger()
    files=os.listdir(dirLocLoad+"\\convereted files")
    #iterating through files again to merge the pdfs 
    for f in files:
        if(f.endswith('.pdf')):
            path=dirLocLoad+"\\convereted files\\"+f
            merger.append(path)
    if not os.path.exists(dirLocLoad+"\\results" + '\\merged.pdf'):
        merger.write(dirLocLoad+"\\results" + '\\merged.pdf')
    merger.close()     
    # deleting the folder with the converted files 
    # but checking if the folder was created
    if(is_photo_found):    
        shutil.rmtree(dirLocLoad+"\\convereted files")
    if(textCheckBox.get() == 0):    
        donePopUp()
    

# converting photo to pdf
def convertor(path):
    im= PIL.Image.open(path)
    img= im.convert()
    newName= get_file_name(path)
    img.save(dirLocLoad+"\\convereted files\\"+newName+".png")
    input_dir=dirLocLoad+"\\convereted files\\"+newName+".png"
    imag = cv2.imread(input_dir)
    result = pytesseract.image_to_pdf_or_hocr(imag, lang='heb+eng+ara')
    with open(dirLocLoad+"\\convereted files\\"+newName+".pdf", 'w+b') as f:
        f.write(bytearray(result))


  
# defining the gui 
def gui_configurtion():

    frame= tk.Frame(master=window)
    frame.pack()
    # setting the font for the tittle
    Font_tuple = ("Comic Sans MS", 20, "bold")
    title = tk.Label(text="data extractor")
    title.configure(font = Font_tuple)
    title.pack(side=tk.TOP)
    labelOne = tk.Label(text="first choose a folder to load from")
    labelOne.pack(side=tk.TOP)
    labelTwo = tk.Label(text="then press start to extract")
    labelTwo.pack(side=tk.TOP)

    loadingButton = tk.Button(text="loading folder", command = getFolderPath)
    loadingButton.pack(side=tk.BOTTOM)
    startButton = tk.Button(text="start", command = determinateAction)
    startButton.pack(side=tk.BOTTOM)
    Checkbutton(text="convert to one pdf file", variable=pdfCheckBox).pack(side=tk.BOTTOM)
    Checkbutton(text="extract from file to text", variable=textCheckBox).pack(side=tk.BOTTOM)

    window.mainloop()



#returning the file name without the ending
# path is where the file is 
def get_file_name_without_ending(path):
    #getting the name of the file without the ending
    beginning=path.split(".")
    return beginning[0]


#returns the file name itself, without the dir and the ending
# path is where the file is 
def get_file_name(path):
    name = path.split(".")
    na = name[0]
    file_na = na.split("\\")
    file_name=file_na[len(file_na)-1]
    return file_name

# returns the path to the folder the file is at
def get_file_directory():
    file_dir = dirLocLoad.split(".")
    file_directory=""
    for i in range(len(file_dir)-1):
        file_directory+=file_dir[i]
    return file    
    
#converting the pdf to image and gets the data out of it, then saving it to
# data which will be returned at the end of the function
#path is the path to the file location
#file_name is the name of the file without ending

def convert_to_image(path, file_name, mode):
    # Store Pdf with convert_from_path function
    images = convert_from_path(path)
    data = ""
    file_na = get_file_name(file_name)
    converted_path = create_folder("\\convereted files\\")
    for i in range(len(images)):   
    #checking which function called the method, then saving the files
    #based on what the function needs. 1 means pdf merger, otherwise text 
    #extractor
        if(mode == 1):
        # saving pages as images with different names to keep the data
        #while creating a file for each page to convert later to pdf
            images[i].save(converted_path+file_na +str(i)+".jpg", 'JPEG')
            img= PIL.Image.open(converted_path+file_na +str(i)+".jpg")
        else:
        # saving pages as images with different names to keep the data but overriding
        #the file file everytime
            images[i].save(converted_path+file_na +str(1)+".jpg", 'JPEG')
            img= PIL.Image.open(converted_path+file_na +str(1)+".jpg")        
        img.load()
        # setting which languages we expect to see in the pictures so the text is saved correctly
        data += pytesseract.image_to_string(img,'heb+eng+ara') 
    return data        

#getting the data from the picture
#returning the data 
#path is the location of the file
def get_data(path):
    #opening the picture and saving it to variable
    img= PIL.Image.open(path)
    img.load()
    # getting the data from the picture
    data = pytesseract.image_to_string(img,'heb+eng+ara')
    return data


#writing the data to the text file, which his name is determinated by the name
#of the file that we got at the beginning.
#data is the text we going to write
#file_name is the name of the files we iterates through
def write_data(file_name,data):
    with open(file_name+".txt",encoding='utf-8',mode="w+") as file:
        file.write(data)


#returning full path of the file that is being saved
#file_name is the name of the file without ending
def saving_folder_name(file_name):
    pathList = file_name.split("\\")
    path_name = pathList[len(pathList)-1]
    fileList =path_name.split(".")
    f_name=fileList[0]
    final_file_location=dirLocLoad+"\\results\\"+f_name
    return final_file_location 
    
#creating the folders for saving and extracting 
def create_folder(name):
    #creating a new folder where the saved images will be saved at
    path = dirLocLoad+name
    #checking whenever the folder already exists
    if not os.path.exists(path):
        os.makedirs(path)
    return path
        
def main():
    gui_configurtion()
        
if __name__ == "__main__":
    main()  
