import os

import guiClassN
import threading
from tkinter.ttk import Progressbar
import tkinter as tk

from tkinter import Checkbutton, IntVar

from multiprocessing.pool import ThreadPool

import requests
import base64
import warnings
import time
import speechboard_api
from speechboard_api.api import task_api

import tkinter.filedialog

from speechboard_api.model.recognize_task_request import RecognizeTaskRequest

from speechboard_api.model.batch_recognition_config import BatchRecognitionConfig

# creating a instance from the class to access the methods
gui_vars=guiClassN.gui_vars()
# creating the window
window = tk.Tk()
window.geometry('420x350')

no_thread_check_box = IntVar()
no_download_check_box=IntVar()

usrPass = ()
b64Val = 
head = {}



# UPDATE BACK TO RELATIVITY ########################################################
# artifact_id: the identification id of the file in the relativity system 
# text: the text of the extracted record 
# the function trying to upload the text to the extracted text field of the object
# in relativity. if it fails, the excel will be updated otherwise will return
# true
def update_relativity(artifact_id,text):
    
    update_body = {
                        "Request":{
                            "Object": {
                                "ArtifactID": artifact_id
                            },
                            "FieldValues": [
                                {
                                "Field":
                                    {
                                    "Name" : "Extracted Text" #Extracted text
                                    },
                                    "Value": text
                                },
                                {
                                    "Field":{
                                    "Name":""
                                    },
                                    
    
                                    "Value": False
                                    } 
                            ]
                        }
                    }
    j = requests.post(url =
                          'https://relativity-web/Relativity.Rest/API/Relativity.Objects/workspace/'+gui_vars.get_workspace_id()+'/object/update', 
                          json = update_body,headers = head, verify = False)
    if j.ok:
        return True
    else:
  
        # updating the excel to show the text failed to be uploaded
        gui_vars.saving_excel(artifact_id,"failed to upload")
        print("ERROR:", artifact_id)
        return False



# setting the thread
class myThread (threading.Thread):
    def __init__(self, name,window, top_info_label,top_progress_bar,top_start_label,top_end_label,
     case_id_error_label,folder_error_label):
      threading.Thread.__init__(self)
      self.name = name
      self.window = window
      self.top_info_label= top_info_label
      self.top_progress_bar=top_progress_bar
      self.top_start_label=top_start_label
      self.top_end_label=top_end_label
      
      self.case_id_error_label=case_id_error_label
      
      self.folder_error_label=folder_error_label

    def run(self):
        if self.name=="checker":
            checker(self.window,self.top_info_label,self.top_progress_bar,self.top_start_label,self.top_end_label,
             self.case_id_error_label,self.folder_error_label)
       

# extracting the file name with it's extenstion from the data
# returning the file name
def make_file_name(file_data):
    fields = file_data['FieldValues']
    
    # iterating through the file data 
    for field in fields:
        if field['Field']['Name'] == 'Original File Extension':
            extension = field['Value']
        elif field['Field']['Name'] == 'Control Number':
            name = field['Value']
    return name + "." + extension

# downloading the files from relativity, updating the tk inter variables 
def info_download(window,top_info_label,top_progress_bar
                                                                           ,top_start_label,top_end_label,
                                                                           resp):

    top_info_label.config(text="in progress")
    all_objects = resp['Objects']
    
    top_start_label.config(text="0")
    
    # updating the labels with the current numbers
    top_end_label.config(text=str(len(all_objects)))
    
    top_progress_bar['maximum']=len(all_objects)
    
    # updaing the label to present what the program is doing
    top_info_label.config(text="getting info")
    
    # getting the objects from the response
    all_objects = resp['Objects']
    

    top_start_label.config(text=("0"))   
    top_progress_bar['value']=0    

    
    # checking if the user checked the "no threads" check box
    
    if no_thread_check_box.get()==0:
    
    	# creating therads based on the amount that the user asked for
        pool = ThreadPool(processes=gui_vars.get_workers())
        threads = []
        
	# splitting the objects evenlly between the threads
	
        for temp_list in [all_objects[i::gui_vars.get_workers()] for i in range(gui_vars.get_workers())]:
		
            threads.append(pool.apply_async(files_download, (window,top_info_label,top_progress_bar
                                                                                        ,top_start_label,top_end_label,
                                                                                        temp_list)))
        
        # waiting for all threads to complete
        for thread in threads:
            thread.get()
        
        # cleaning up the pool
        pool.close()
        pool.join()

    # the user checked the "no threads" check box
    else:

        files_download(window,top_info_label,top_progress_bar
                                                                                       ,top_start_label,top_end_label,all_objects)
            
        
    print('finished downloading files from Relativity')        
    
# downloading the files from relativity, updating the tk inter variables 
def files_download(window,top_info_label,top_progress_bar
                                                                           ,top_start_label,top_end_label,
                                                                            all_objects):

    for i in range(len(all_objects)):
        try:

            file_path=""
            if 'ArtifactID' in all_objects[i]:
                
                
                # getting the file type 
                suffix= all_objects[i]['FieldValues'][0]["Value"]
                
                # getting the artifact id
                artifact_id= str(all_objects[i]['ArtifactID'])
                
                
                response = requests.get(url =
                    'https://relativity-web/Relativity.Rest/API/Relativity.Document/workspace/'+gui_vars.get_workspace_id()+'/downloadnativefile/'+artifact_id,
                    headers = head, verify = False)
    
                if response.status_code != 200:
                    print("problem with response from relativity")
                    break
                
                # saving the file locally 
                file=open(gui_vars.get_dir_load()+artifact_id+"."+suffix.lower(),"wb")
                file.write(response.content)
                file.close()
    
      		# saving the file path to pass as parameter 
                file_path=gui_vars.get_dir_load()+artifact_id+"."+suffix.lower()
                
                text_extractor(window, top_info_label, top_progress_bar, top_start_label,file_path)
            
        except Exception as e:
            
            artifact_id= str(all_objects[i]['ArtifactID'])
            # save failed
            text = "failed to save "+e
            gui_vars.saving_excel(artifact_id,text, "0")
           
            if update_relativity(artifact_id, text, False):
                print("updated to relativity", text,e, str(all_objects[i]['ArtifactID']))
                




# the function gets the tk inter variables to update them.
# files: a list of files the function receives, then iterates over them to
# extract the text out of it.

def text_extractor(window,top_info_label,top_progress_bar,top_start_label,file_path):
  
    f= os.path.basename(file_path)
    tamlil_name = f.split("$")[0]


    print("file name is",file_path)
    bit_version = open(file_path, 'rb') 

    # server IP
    configuration = speechboard_api.Configuration(
        host = ""
    )
    
    # API key
    configuration.api_key['api_key'] = ''  
    try:
        with speechboard_api.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = task_api.TaskApi(api_client)
            
            # settings for the request 
            # preset= which moudle will be used for the text
            # enable_speaker_diarization the tool will try to differante between the callers and assign numbers 
            # diarization_speaker_count -1 means the tool will try to understand on it's own how many people are in the 
            # call, if the amount of people is known, we can write it instead. 
            request = RecognizeTaskRequest(
                config=BatchRecognitionConfig(
                    preset="telephony-general",  # TODO: Choose 'general', 'telephony'
                    enable_speaker_diarization = True,
                    diarization_speaker_count= -1,
                ),
            )
        
    
            artifact_id=tamlil_name.split(".")[0]
           
            # checking if it is a file
            top_info_label.config(text=tamlil_name+" in progress")
    
            text = """דובר 1: """
            speaker = 1
            try:
                # Create new task
                api_response = api_instance.create_task(request=request, file=bit_version)
                success_marker = True
                # saving the id of the response
                id = api_response.response.id
                
                
                
                while (str(api_instance.get_task_by_id(id)["response"]["status"])!= "FINISHED"):
                    timlul_status = str(api_instance.get_task_by_id(id)["response"]["status"])
                    if timlul_status== "ACCEPTED":
                        print(tamlil_name,"ACCEPTED")
                        time.sleep(3)
                    # dealing with timlul situations:
                    elif timlul_status == "IN PROGRESS":
                        print(tamlil_name,"IN PROGRESS")
                        time.sleep(3)
                    elif timlul_status == "ERROR_EXPIRED":
                        success_marker = False
                        text = "corrupted file"
                        print(tamlil_name,text)
                        if update_relativity(artifact_id,text):
                            print("file {} was succesfully uploaded to Relativity".format(f)) 
                        gui_vars.saving_excel(file_path,text)
                        break
                        
                # making sure we are not coming from break statement before     
                if success_marker == True:
                    
                   # iterating through the words and speaker tags to create a text with new lines for each talker
                    try: 
                        
                        top_info_label.config(text="generating text for "+ tamlil_name)
                        print("generating text for",tamlil_name)
                        for i in range(0,len(api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"]),2):
                            k= i +1
                            # if the speaker changed, creating a new line
                            if(api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][i]["speaker_tag"]!= speaker):
                                text=text+"\n"
                                text=text+"דובר "+str(api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][i]["speaker_tag"])+": "
                                text=text+api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][i]["word"]+ " "
                                speaker = api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][i]["speaker_tag"]
                            else:
                                text=text+api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][i]["word"]+ " "
                            try:    
                                if(api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][k]["speaker_tag"]!= speaker):
                                    text=text+"\n"
                                    text=text+"דובר "+str(api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][k]["speaker_tag"])+": "
                                    text=text+api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][k]["word"]+ " "
                                    speaker = api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][k]["speaker_tag"]
                                else:
                                    text=text+api_instance.get_task_by_id(id)["response"]["response"]["results"][0]['nbests'][0]["words"][k]["word"]+ " "    
                            except:
                                continue     
                
   

                        # updating relativity object with the extracted text
                        if update_relativity(artifact_id,text):
                            print("file {} was succesfully uploaded to Relativity".format(f)) 

                            

                    # the system failed to extract text from the record
                    except:
                        # updating relativity object with the error text 
                        if update_relativity(artifact_id,"no sound"):
                            print("file {} error was succesfully uploaded to Relativity".format(f)) 
  
                        gui_vars.saving_excel(file_path, "no sound")
                        print("-------------------------!!!!-----------------------------")
                        print(" Error probably not sound in file, moving to next file")
                        print("-------------------------!!!!-----------------------------")
                        pass
                    
                
            
            # the api encountered an error
            except speechboard_api.ApiException as e:
                # updating relativity object with the error text 
                if update_relativity(artifact_id,"problem with timlul"):
                    print("file {} was succesfully uploaded to Relativity".format(f)) 
                gui_vars.saving_excel(file_path, "problem with timlul")
                print("Exception when calling TaskApi->create_task: %s\n" % e)
    except:
        print("problem with api")
        gui_vars.saving_excel(file_path, "problem with api")
    gui_vars.increase_files_count()
    top_start_label.config(text=str(gui_vars.get_files_count()))
    top_progress_bar['value']=gui_vars.get_files_count()
    os.remove(file_path)
                

# recreating the folders to clear the data inside
def create_folder(folder):
    # checking if the folder exists
    if not os.path.exists(folder):
        os.makedirs(folder)

def start(window,top_info_label,top_progress_bar
                                                                           ,top_start_label,top_end_label,
                                                                            case_id_error_label
                                                                           ,folder_error_label):
    
    #gui_vars.reset_all()
    checker_thread = myThread("checker",window,top_info_label,top_progress_bar
                                                                               ,top_start_label,top_end_label,
                                                                                case_id_error_label,folder_error_label)
    
    checker_thread.start()

# the function receives the tkinter variables, updating them through the process
# the function will call the files_download thread to start downloading the files
def checker(window, top_info_label,top_progress_bar,top_start_label,top_end_label,case_id_error_label,folder_error_label):
    
    if gui_vars.get_dir_load()=="":
        folder_error_label.config(text="CHOOSE A FOLDER",fg="red")
    else:    
        folder_error_label.config(text=" ")

        gui_vars.set_error_path("errors//")
        global thread_entry
        global e1
     

        try:
            # checking if the user put a number in the entry
            gui_vars.set_workers(int(thread_entry.get()))
            
            # limiting the amount of threads to 15, even if the user
            # input more (system limit)
            if (gui_vars.get_workers()>15):
                gui_vars.set_workers(15)
            
            # if the user input 0, making sure the program will
            # still run
            if(gui_vars.get_workers()<1):
                gui_vars.set_workers(1)
        
        # the user ignored the entry, setting the threads number to 15
        # (as stated in the gui, 15 is the default)            
        except:
            gui_vars.set_workers(15)
        
        workspace_id=e1.get()

        if(workspace_id==""):
            case_id_error_label.config(text="ENTER CASE ID", fg ="red")
            print("please enter workspace ID")
            
        else:
            case_id_error_label.config(text=" ")
            gui_vars.set_workspace_id(str(workspace_id))
            warnings.catch_warnings()
            warnings.simplefilter("ignore")
    

   
            create_folder(gui_vars.get_dir_load())

            create_folder(gui_vars.get_error_path())
            #Relativity get files for DIXI
            dixi_body={
               "Request":{
                "ObjectType": {
                "ArtifactTypeID": 10
                    },
                    "fields": [
                    {"Name": "Original File Extension"},
                    {"Name" : "Control Number"},
                    ],
                    "condition" : "'ICA_ETYPE' == True",
                    "sorts":[
                    ]
                },
                "start" : 0,
                "length" : 25000
            }
            top_info_label.config(text="in progress")    
            response = requests.post(url =
                                     'https://relativity-web/Relativity.Rest/API/Relativity.Objects/workspace/'+gui_vars.get_workspace_id()+'/object/query',
                                     json = dixi_body,headers = head, verify = False)
            resp = response.json()
            
            info_download(window,top_info_label,top_progress_bar
                                                                                       ,top_start_label,top_end_label,
                                                                                       resp)
        
#getting the folder path from the user
def get_folder_path(window,folder_error_label):
    
    gui_vars.set_dir_load(tk.filedialog.askdirectory())
    # updating the gui to show if the user chose a folder

    if(gui_vars.get_dir_load()==""):
        # the user didn't choose a folder, letting him know by putting an
        # 'x' next to the button
        folder_error_label.config(text="X",fg="red")
    else:
    
        folder_error_label.config(text="V",fg="green")
        
#defining the gui 
def gui_configurtion():
    # setting the font for the tittle
    Font_tuple = ("Comic Sans MS", 20, "bold")
    font_text= (14)
    
    
    title = tk.Label(text="Timlul")
    title.configure(font = Font_tuple)
    title.grid(row=0,column = 2)
    
    label_one = tk.Label(text="choose a folder to load from",font=font_text)
    label_one.grid(row=1, column = 2)
    

    label_two = tk.Label(text="then press start",font=font_text)
    label_two.grid(row=2, column = 2)
    
    tk.Label(window,text="CaseID", font=font_text).place(x=50,y=90)
    
    case_id_error_label=tk.Label(window,text="",font=font_text)
    case_id_error_label.place(x=280,y=90)
    global e1
    e1 = tk.Entry(window)
    e1.grid(row=3, column=2)
    
    top_info_label = tk.Label(text= "",font=font_text, width=42)
    top_info_label.grid(row=4,column = 2)
    
    top_start_label = tk.Label(text="", font=font_text)
    top_start_label.place(x=75,y = 133)
    
    top_progress_bar = Progressbar(window, orient= 'HORIZONTAL'.lower(),length= 100, mode= 'determinate')
    top_progress_bar.grid(row=5, column=2)
    
    top_end_label=tk.Label(text=" ", font=font_text)
    top_end_label.place(x=255,y = 133)
    

    folder_error_label = tk.Label(text="", font=font_text)
    folder_error_label.place(x=255,y = 160)


    
    thread_button=Checkbutton(text="no threads", variable=no_thread_check_box,font=font_text)
    thread_button.grid(row=8,column=2)
    
    
    
    thread_label= tk.Label(text="threads(1-15", font=font_text)
    thread_label.place(x=50,y=250)
    
    thread_additional=tk.Label(text="default is 15)", font=font_text)
    thread_additional.place(x=50,y=270)
    
    global thread_entry
    thread_entry=tk.Entry(window, width=5)
    thread_entry.grid(row=10,column=2,pady=2)
    
    loading_button = tk.Button(text="loading folder",font=font_text, command = lambda: get_folder_path(window,folder_error_label))
    loading_button.grid(row=6,column = 2)
    
    start_button = tk.Button(text="start",font=font_text, command =lambda: start(window,top_info_label,top_progress_bar
                                                                               ,top_start_label,top_end_label,case_id_error_label,folder_error_label))
    start_button.grid(row=7,column = 2)

    
    window.focus()
    window.mainloop()
    
            
if __name__ == "__main__":
    gui_vars.st_init()
    gui_configurtion()
       
